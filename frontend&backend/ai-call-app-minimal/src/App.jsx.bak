import React, { useState, useEffect } from 'react';
import './App.css';

const App = () => {
  const [currentView, setCurrentView] = useState('chats');
  const [selectedChat, setSelectedChat] = useState(null);
  const [isInCall, setIsInCall] = useState(false);
  const [callType, setCallType] = useState(null);
  const [showCharacterBuilder, setShowCharacterBuilder] = useState(false);
  const [selectedInterests, setSelectedInterests] = useState([]);
  const [droneStatus, setDroneStatus] = useState('disconnected');
  const [isMuted, setIsMuted] = useState(false);

  const toggleMute = () => {
    setIsMuted(!isMuted);
  };

  // –î–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏
  const realPeople = [
    { id: 1, name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', lastMessage: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', time: '14:30', avatar: '–ú', online: true },
    { id: 2, name: '–û–Ω–∞', lastMessage: '–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞?', time: '13:45', avatar: '–û', online: true },
    { id: 3, name: '–î–∞—Ä—å—è', lastMessage: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!', time: '12:20', avatar: '–î', online: false },
    { id: 4, name: '–ú–∏—Ä–∞', lastMessage: '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è!', time: '11:15', avatar: '–ú', online: true },
  ];

  // –î–∞–Ω–Ω—ã–µ AI –∞–≥–µ–Ω—Ç–æ–≤
  const aiAgents = [
    { id: 'founder', name: 'Founder', description: '–û–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', emoji: 'üë®‚Äçüíº', character: 'business' },
    { id: 'foundersha', name: 'Foundersha', description: '–ñ–µ–Ω—â–∏–Ω–∞-–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', emoji: 'üë©‚Äçüíº', character: 'creative' },
    { id: 'creeper', name: '–ö—Ä–∏–ø–µ—Ä', description: '–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂', emoji: 'üëæ', character: 'mystery' },
    { id: 'twinby', name: 'Twinby', description: '–î–≤–æ–π–Ω–∏–∫ —Å –∏–¥–µ—è–º–∏', emoji: 'üë•', character: 'innovation' },
  ];

  // –ò–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
  const interests = [
    { id: 'sport', name: '–°–ø–æ—Ä—Ç', emoji: '‚öΩ', category: 'sport' },
    { id: 'running', name: '–ë–µ–≥', emoji: 'üèÉ', category: 'sport' },
    { id: 'swimming', name: '–ü–ª–∞–≤–∞–Ω–∏–µ', emoji: 'üèä', category: 'sport' },
    { id: 'yoga', name: '–ô–æ–≥–∞', emoji: 'üßò', category: 'sport' },
    { id: 'music', name: '–ú—É–∑—ã–∫–∞', emoji: 'üéµ', category: 'creative' },
    { id: 'painting', name: '–ñ–∏–≤–æ–ø–∏—Å—å', emoji: 'üé®', category: 'creative' },
    { id: 'photography', name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', emoji: 'üì∏', category: 'creative' },
    { id: 'dancing', name: '–¢–∞–Ω—Ü—ã', emoji: 'üíÉ', category: 'creative' },
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¥—Ä–æ–Ω—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—É–∫–∞
  const droneAPI = async (endpoint, character = null, streamUrl = null) => {
    try {
      setDroneStatus('connecting');
      let url = `http://localhost:3001/api/drone/${endpoint}`;
      
      const params = new URLSearchParams();
      if (character) {
        params.append('character', character);
      }
      if (streamUrl) {
        params.append('streamUrl', streamUrl);
      }
      
      if (params.toString()) {
        url += '?' + params.toString();
      }
      
      const response = await fetch(url);
      if (response.ok) {
        setDroneStatus('connected');
        console.log(`Drone ${endpoint} successful${streamUrl ? ' with stream: ' + streamUrl : ''}`);
        return true;
      } else {
        setDroneStatus('disconnected');
        console.log(`Drone ${endpoint} failed`);
        return false;
      }
    } catch (error) {
      setDroneStatus('disconnected');
      console.log(`Drone ${endpoint} error:`, error);
      return false;
    }
  };

  // –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∑–≤—É–∫–∞
  const startCall = async (type, contact) => {
    setCallType(type);
    setIsInCall(true);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –¥—Ä–æ–Ω—É –¥–ª—è –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤
    await droneAPI('takeoff');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∏–º –∑–≤—É–∫–∞ –¥–ª—è –¥—Ä–æ–Ω–∞
    const streamUrl = `http://localhost:3001/stream/audio/${contact.id || contact.name}/${Date.now()}`;
    console.log('–î—Ä–æ–Ω –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Å—ã–ª–∫—É —Å–æ —Å—Ç—Ä–∏–º–æ–º –∑–≤—É–∫–∞:', streamUrl);
    await droneAPI('audio', null, streamUrl);
    
    if (contact.character) {
      // –î–ª—è AI –∞–≥–µ–Ω—Ç–æ–≤ - —Ä–∞–∑–≤–æ—Ä–æ—Ç –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
      await droneAPI('turn', contact.character);
    } else {
      // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç
      await droneAPI('turn', 'default');
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  const endCall = () => {
    setIsInCall(false);
    setCallType(null);
    setShowCharacterBuilder(false);
    setSelectedInterests([]);
    setDroneStatus('disconnected');
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞ —Å AI –∞–≥–µ–Ω—Ç–æ–º
  const handleAICall = (agent, type) => {
    setSelectedChat(agent);
    setCallType(type);
    setShowCharacterBuilder(true);
  };

  // –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ —Å AI –∞–≥–µ–Ω—Ç–æ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
  const startAICall = async () => {
    setShowCharacterBuilder(false);
    await startCall(callType, selectedChat);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
  const toggleInterest = (interestId) => {
    if (selectedInterests.includes(interestId)) {
      setSelectedInterests(selectedInterests.filter(id => id !== interestId));
    } else if (selectedInterests.length < 5) {
      setSelectedInterests([...selectedInterests, interestId]);
    }
  };

  // –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
  const renderCharacterBuilder = () => (
    <div className="character-builder-overlay">
      <div className="character-builder">
        <h2>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã</h2>
        
        <div className="interests-section">
          <h3>–°–ø–æ—Ä—Ç –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö</h3>
          <div className="interests-grid">
            {interests.filter(i => i.category === 'sport').map(interest => (
              <button
                key={interest.id}
                className={`interest-tag ${selectedInterests.includes(interest.id) ? 'selected' : ''}`}
                onClick={() => toggleInterest(interest.id)}
              >
                {interest.emoji} {interest.name}
              </button>
            ))}
          </div>
        </div>

        <div className="interests-section">
          <h3>–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ</h3>
          <div className="interests-grid">
            {interests.filter(i => i.category === 'creative').map(interest => (
              <button
                key={interest.id}
                className={`interest-tag ${selectedInterests.includes(interest.id) ? 'selected' : ''}`}
                onClick={() => toggleInterest(interest.id)}
              >
                {interest.emoji} {interest.name}
              </button>
            ))}
          </div>
        </div>

        <div className="counter">{selectedInterests.length} –∏–∑ 5</div>
        
        <button className="start-call-btn" onClick={startAICall}>
          –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫
        </button>
      </div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–≤–æ–Ω–∫–∞
  const renderCallInterface = () => (
    <div className="call-interface">
      <div className="call-avatar">
        {selectedChat.emoji || selectedChat.avatar}
      </div>
      <h2>{selectedChat.name}</h2>
      <p>{callType === 'video' ? '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫'}</p>
      
      <div className={`drone-status ${droneStatus}`}>
        {droneStatus === 'connecting' && 'üöÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥—Ä–æ–Ω–∞...'}
        {droneStatus === 'connected' && 'üöÅ –î—Ä–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å—Ç—Ä–∏–º—É'}
        {droneStatus === 'disconnected' && '–î—Ä–æ–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
      </div>

      <div className="call-controls">
        <button className="control-btn microphone" onClick={toggleMute}>
          <img src={isMuted ? "/icons/mute.png" : "/icons/unmute.png"} alt="microphone" className="icon-button" />
        </button>
        <button className="control-btn end-call" onClick={endCall}>
          <img src="/icons/phone.png" alt="end call" className="icon-button" />
        </button>
        <button className="control-btn camera">
          <img src="/icons/camera.png" alt="camera" className="icon-button" />
        </button>
      </div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä —á–∞—Ç–∞
  const renderChat = () => (
    <div className="chat-interface">
      <div className="chat-header">
        <button className="back-btn" onClick={() => setSelectedChat(null)}>‚Üê</button>
        <div className="chat-info">
          <div className="chat-avatar">{selectedChat.emoji || selectedChat.avatar}</div>
          <div>
            <h3>{selectedChat.name}</h3>
            <p>{selectedChat.character ? 'AI –ê–≥–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω' : '–í —Å–µ—Ç–∏'}</p>
          </div>
        </div>
        <div className="chat-actions">
          <button 
            className="call-btn audio" 
            onClick={() => selectedChat.character ? 
              handleAICall(selectedChat, 'audio') : 
              startCall('audio', selectedChat)
            }
          >
            <img src="/icons/phone.png" alt="audio call" className="icon-button" />
          </button>
          <button 
            className="call-btn video" 
            onClick={() => selectedChat.character ? 
              handleAICall(selectedChat, 'video') : 
              startCall('video', selectedChat)
            }
          >
            <img src="/icons/camera.png" alt="video call" className="icon-button" />
          </button>
        </div>
      </div>

      <div className="chat-messages">
        <div className="message received">
          <p>{selectedChat.character ? 
            `–ü—Ä–∏–≤–µ—Ç! –Ø ${selectedChat.name}. –ö–∞–∫ –¥–µ–ª–∞?` : 
            selectedChat.lastMessage
          }</p>
          <span className="time">14:30</span>
        </div>
        <div className="message sent">
          <p>–ü—Ä–∏–≤–µ—Ç! {selectedChat.character ? '–•–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π!' : '–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!'}</p>
          <span className="time">14:32</span>
        </div>
      </div>

      <div className="chat-input">
        <input type="text" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
        <button><img src="/icons/send.png" alt="send" className="icon-button" /></button>
      </div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  const renderChatsList = () => (
    <div className="chats-list">
      {realPeople.map(person => (
        <div 
          key={person.id} 
          className="chat-item" 
          onClick={() => setSelectedChat(person)}
        >
          <div className="chat-avatar">
            {person.avatar}
            {person.online && <div className="online-indicator"></div>}
          </div>
          <div className="chat-content">
            <div className="chat-header-info">
              <h3>{person.name}</h3>
              <span className="time">{person.time}</span>
            </div>
            <p>{person.lastMessage}</p>
          </div>
        </div>
      ))}
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ AI –∞–≥–µ–Ω—Ç–æ–≤
  const renderAIAgentsList = () => (
    <div className="ai-agents-list">
      {aiAgents.map(agent => (
        <div key={agent.id} className="ai-agent-card">
          <div className="agent-avatar">{agent.emoji}</div>
          <h3>{agent.name}</h3>
          <p>{agent.description}</p>
          <button 
            className="agent-chat-btn"
            onClick={() => setSelectedChat(agent)}
          >
            –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞
          </button>
        </div>
      ))}
    </div>
  );

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä
  if (isInCall) {
    return renderCallInterface();
  }

  if (showCharacterBuilder) {
    return renderCharacterBuilder();
  }

  if (selectedChat) {
    return renderChat();
  }

  return (
    <div className="app">
      <div className="app-header">
        <h1>{currentView === 'chats' ? '–ß–∞—Ç—ã' : 'AI –ê–≥–µ–Ω—Ç—ã'}</h1>
        <p>{currentView === 'chats' ? '–í–∞—à–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ –±–µ—Å–µ–¥—ã' : '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'}</p>
      </div>

      <div className="navigation">
        <button 
          className={`nav-btn ${currentView === 'chats' ? 'active' : ''}`}
          onClick={() => setCurrentView('chats')}
        >
          –ß–∞—Ç—ã
        </button>
        <button 
          className={`nav-btn ${currentView === 'ai' ? 'active' : ''}`}
          onClick={() => setCurrentView('ai')}
        >
          AI –ê–≥–µ–Ω—Ç—ã
        </button>
      </div>

      <div className="content">
        {currentView === 'chats' ? renderChatsList() : renderAIAgentsList()}
      </div>
    </div>
  );
};

export default App;

