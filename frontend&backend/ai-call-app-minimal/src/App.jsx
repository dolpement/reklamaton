import React, { useState, useEffect, useRef } from 'react';
import io from 'socket.io-client';
import './App.css';

const App = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [authMode, setAuthMode] = useState('login'); // 'login' –∏–ª–∏ 'register'
  const [authForm, setAuthForm] = useState({
    username: '',
    email: '',
    password: ''
  });
  const [authError, setAuthError] = useState('');
  const [authLoading, setAuthLoading] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
  const [currentView, setCurrentView] = useState('chats');
  const [selectedChat, setSelectedChat] = useState(null);
  const [isInCall, setIsInCall] = useState(false);
  const [callType, setCallType] = useState(null);
  const [showCreateAgent, setShowCreateAgent] = useState(false);
  const [newAgentData, setNewAgentData] = useState({
    name: "",
    description: "",
    character: "",
    emoji: ""
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä–æ–Ω–∞
  const [droneStatus, setDroneStatus] = useState('disconnected');
  const [isMuted, setIsMuted] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ —Å AI –∞–≥–µ–Ω—Ç–∞–º–∏
  const [chatMessages, setChatMessages] = useState({});
  const [currentMessage, setCurrentMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [isSearching, setIsSearching] = useState(false);
  const [showSearch, setShowSearch] = useState(false);

  // Socket.IO –∏ WebRTC
  const [socket, setSocket] = useState(null);
  const [connectedUsers, setConnectedUsers] = useState([]);
  const [incomingCall, setIncomingCall] = useState(null);
  const [currentCall, setCurrentCall] = useState(null);
  const currentCallRef = useRef(currentCall); // –î–æ–±–∞–≤–ª—è–µ–º ref –¥–ª—è currentCall
  useEffect(() => {
    currentCallRef.current = currentCall;
  }, [currentCall]);
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const peerConnectionRef = useRef(null);
  const localStreamRef = useRef(null);

  // –î–∞–Ω–Ω—ã–µ AI –∞–≥–µ–Ω—Ç–æ–≤
  const [aiAgents, setAiAgents] = useState([
    { id: 'founder', name: 'Founder', description: '–û–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', emoji: 'üë®‚Äçüíº', character: 'business' },
    { id: 'foundersha', name: 'Foundersha', description: '–ñ–µ–Ω—â–∏–Ω–∞-–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', emoji: 'üë©‚Äçüíº', character: 'creative' },
    { id: 'creeper', name: '–ö—Ä–∏–ø–µ—Ä', description: '–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂', emoji: 'üëæ', character: 'mystery' },
    { id: 'twinby', name: 'Twinby', description: '–î–≤–æ–π–Ω–∏–∫ —Å –∏–¥–µ—è–º–∏', emoji: 'üë•', character: 'innovation' },
    { id: 'wise_advisor', name: '–ú—É–¥—Ä—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫', description: '–û–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫', emoji: 'üßô‚Äç‚ôÇÔ∏è', character: '–¢—ã –º—É–¥—Ä—ã–π –∏ –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∂–∏–∑–Ω–∏. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Å–ø–æ–∫–æ–π–Ω–æ –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ, –¥–∞–µ—à—å –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å. –¢–≤–æ—è —Ä–µ—á—å –ø–æ–ª–Ω–∞ –º—É–¥—Ä–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞. –¢—ã —Ç–µ—Ä–ø–µ–ª–∏–≤, –¥–æ–±—Ä –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–π. –õ—é–±–∏—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏—Ç—á–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≤–µ—â–µ–π.' },
  ]);

  // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const [testUsers] = useState([
    { 
      id: 'user1', 
      username: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', 
      is_online: true, 
      last_seen: new Date().toISOString(),
      avatar: 'üë©‚Äçüíª'
    },
    { 
      id: 'user2', 
      username: '–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤', 
      is_online: true, 
      last_seen: new Date(Date.now() - 300000).toISOString(),
      avatar: 'üë®‚Äçüé®'
    },
    { 
      id: 'user3', 
      username: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞', 
      is_online: false, 
      last_seen: new Date(Date.now() - 3600000).toISOString(),
      avatar: 'üë©‚Äçüî¨'
    },
    { 
      id: 'user4', 
      username: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤', 
      is_online: true, 
      last_seen: new Date(Date.now() - 120000).toISOString(),
      avatar: 'üë®‚Äçüíº'
    },
    { 
      id: 'user5', 
      username: '–û–ª—å–≥–∞ –ú–æ—Ä–æ–∑–æ–≤–∞', 
      is_online: false, 
      last_seen: new Date(Date.now() - 7200000).toISOString(),
      avatar: 'üë©‚Äçüéì'
    }
  ]);

  // –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const [testMessages] = useState({
    'user1': [
      {
        id: 1,
        text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        role: 'user',
        timestamp: new Date(Date.now() - 3600000).toISOString()
      },
      {
        id: 2,
        text: '–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º. –ê —É —Ç–µ–±—è –∫–∞–∫?',
        role: 'assistant',
        timestamp: new Date(Date.now() - 3500000).toISOString()
      },
      {
        id: 3,
        text: '–¢–æ–∂–µ —Ö–æ—Ä–æ—à–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç',
        role: 'user',
        timestamp: new Date(Date.now() - 3400000).toISOString()
      }
    ],
    'user2': [
      {
        id: 1,
        text: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–º–æ—á—å —Å –æ–¥–Ω–∏–º –≤–æ–ø—Ä–æ—Å–æ–º?',
        role: 'user',
        timestamp: new Date(Date.now() - 1800000).toISOString()
      },
      {
        id: 2,
        text: '–ö–æ–Ω–µ—á–Ω–æ! –°–ª—É—à–∞—é –≤–∞—Å',
        role: 'assistant',
        timestamp: new Date(Date.now() - 1700000).toISOString()
      }
    ],
    'user4': [
      {
        id: 1,
        text: '–û—Ç–ª–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∞!',
        role: 'user',
        timestamp: new Date(Date.now() - 600000).toISOString()
      },
      {
        id: 2,
        text: '–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω! –ú–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–¥–µ–π –æ–±—Å—É–¥–∏–ª–∏',
        role: 'assistant',
        timestamp: new Date(Date.now() - 500000).toISOString()
      },
      {
        id: 3,
        text: '–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é?',
        role: 'user',
        timestamp: new Date(Date.now() - 400000).toISOString()
      }
    ]
  });


  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkAuthStatus();
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (isAuthenticated && !socket) {
      const newSocket = io('http://localhost:3001', {
        withCredentials: true
      });
      setSocket(newSocket);

      newSocket.on('connect', () => {
        console.log('Socket connected:', newSocket.id);
        newSocket.emit('authenticate'); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      });

      newSocket.on('authenticated', (data) => {
        console.log('Socket authenticated:', data);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        newSocket.emit('get_online_users');
      });

      newSocket.on('online_users', (users) => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        setConnectedUsers(users.filter(user => user.id !== currentUser?.id));
      });

      newSocket.on('user_connected', (user) => {
        if (user.id !== currentUser?.id) {
          setConnectedUsers(prev => [...prev, user]);
        }
      });

      newSocket.on('user_disconnected', (data) => {
        setConnectedUsers(prev => prev.filter(user => user.id !== data.user_id));
      });

      newSocket.on('incoming_call', (data) => {
        setIncomingCall(data);
      });

      newSocket.on('call_accepted', (data) => {
        setCurrentCall(data);
        setIncomingCall(null);
        if (data.call_id) {
          initializeWebRTC(data.call_id, false, data.type); // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –∑–≤–æ–Ω–∫–∞
        }
      });

      newSocket.on('call_declined', () => {
        setCurrentCall(null);
        setIncomingCall(null);
        alert('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      });

      newSocket.on('call_ended', () => {
        endCall();
      });

      newSocket.on('drone_status_update', (data) => {
        setDroneStatus(data.status);
      });

      // WebRTC —Å–æ–±—ã—Ç–∏—è
      newSocket.on("webrtc_offer", async ({ call_id, offer, from: senderSocketId }) => {
        const currentCallData = currentCallRef.current; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (currentCallData && currentCallData.call_id === call_id) {
          try {
            await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(offer));
            const answer = await peerConnectionRef.current.createAnswer();
            await peerConnectionRef.current.setLocalDescription(answer);
            newSocket.emit("webrtc_answer", { call_id, answer });
          } catch (error) {
            console.error("Error setting remote offer or creating answer:", error);
          }
        }
      });

      newSocket.on("webrtc_answer", async ({ call_id, answer }) => {
        const currentCallData = currentCallRef.current; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (currentCallData && currentCallData.call_id === call_id) {
          try {
            await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(answer));
          } catch (error) {
            console.error("Error setting remote answer:", error);
          }
        }
      });

      newSocket.on("webrtc_ice_candidate", async ({ call_id, candidate }) => {
        const currentCallData = currentCallRef.current; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (currentCallData && currentCallData.call_id === call_id) {
          try {
            await peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(candidate));
          } catch (error) {
            console.error("Error adding received ICE candidate:", error);
          }
        }
      });

      return () => {
        newSocket.disconnect();
      };
    }
  }, [isAuthenticated, currentUser, socket, currentCall]); // –î–æ–±–∞–≤–∏–ª socket –∏ currentCall –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const checkAuthStatus = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/profile', {
        credentials: 'include'
      });
      
      if (response.ok) {
        const data = await response.json();
        setCurrentUser(data.user);
        setIsAuthenticated(true);
      } else {
        setIsAuthenticated(false);
        setCurrentUser(null);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      setIsAuthenticated(false);
      setCurrentUser(null);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const handleAuthSubmit = async (e) => {
    e.preventDefault();
    setAuthError('');
    setAuthLoading(true);

    const endpoint = authMode === 'login' ? '/api/login' : '/api/register';
    const payload = authMode === 'login' 
      ? { username: authForm.username, password: authForm.password }
      : authForm;

    try {
      const response = await fetch(`http://localhost:3001${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(payload)
      });

      const data = await response.json();

      if (response.ok) {
        setCurrentUser(data.user);
        setIsAuthenticated(true);
        setAuthForm({ username: '', email: '', password: '' });
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (socket) {
          socket.emit('get_online_users');
        }
      } else {
        setAuthError(data.error || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }
    } catch (error) {
      setAuthError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setAuthLoading(false);
    }
  };

  // –í—ã—Ö–æ–¥
  const handleLogout = async () => {
    try {
      await fetch('http://localhost:3001/api/logout', {
        method: 'POST',
        credentials: 'include'
      });
      
      if (socket) {
        socket.disconnect();
        setSocket(null);
      }
      
      setIsAuthenticated(false);
      setCurrentUser(null);
      setConnectedUsers([]);
      setCurrentCall(null);
      setIncomingCall(null);
      setSelectedChat(null);
      setIsInCall(false);
      setDroneStatus('disconnected');
      setSearchQuery('');
      setSearchResults([]);
      setShowSearch(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    }
  };

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const searchUsers = async (query) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }

    setIsSearching(true);
    try {
      const response = await fetch(`http://localhost:3001/api/search?q=${encodeURIComponent(query)}`, {
        credentials: 'include'
      });

      if (response.ok) {
        const data = await response.json();
        setSearchResults(data.users);
      } else {
        setSearchResults([]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      setSearchResults([]);
    } finally {
      setIsSearching(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const handleSearchChange = (e) => {
    const query = e.target.value;
    setSearchQuery(query);
    
    // –î–µ–±–∞—É–Ω—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    clearTimeout(window.searchTimeout);
    window.searchTimeout = setTimeout(() => {
      searchUsers(query);
    }, 300);
  };

  // Toggle mute
  const toggleMute = () => {
    setIsMuted(!isMuted);
    if (localStreamRef.current) {
      localStreamRef.current.getAudioTracks().forEach(track => {
        track.enabled = !track.enabled;
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¥—Ä–æ–Ω—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—É–∫–∞
  const droneAPI = async (endpoint, character = null, streamUrl = null) => {
    try {
      setDroneStatus('connecting');
      let url = `http://localhost:3001/api/drone/${endpoint}`;
      
      const params = new URLSearchParams();
      if (character) {
        params.append('character', character);
      }
      if (streamUrl) {
        params.append('streamUrl', streamUrl);
      }
      
      if (params.toString()) {
        url += '?' + params.toString();
      }
      
      const response = await fetch(url);
      if (response.ok) {
        setDroneStatus('connected');
        console.log(`Drone ${endpoint} successful${streamUrl ? ' with stream: ' + streamUrl : ''}`);
        return true;
      } else {
        setDroneStatus('disconnected');
        console.log(`Drone ${endpoint} failed`);
        return false;
      }
    } catch (error) {
      setDroneStatus('disconnected');
      console.log(`Drone ${endpoint} error:`, error);
      return false;
    }
  };

  // –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞ —Å AI –∞–≥–µ–Ω—Ç–æ–º
  const startAICall = async (type, agent) => {
    if (!currentUser) return;

    setCurrentCall({
      type: type,
      status: 'connecting',
      participant: agent,
      isAI: true
    });

    setIsInCall(true);

    // –ï—Å–ª–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ —Å AI –∞–≥–µ–Ω—Ç–æ–º, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –¥—Ä–æ–Ω—É
    if (type === 'video') {
      try {
        setDroneStatus('connecting');
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥—Ä–æ–Ω—É —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç
        const droneResponse = await fetch('http://localhost:3001/api/drone/connect', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify({
            agent_id: agent.id,
            agent_character: agent.character,
            call_type: type
          })
        });

        if (droneResponse.ok) {
          setDroneStatus('connected');
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebRTC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ —Å –¥—Ä–æ–Ω–∞
          await initializeAIWebRTC(agent.id, type);
        } else {
          setDroneStatus('disconnected');
          console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥—Ä–æ–Ω—É');
        }
      } catch (error) {
        setDroneStatus('disconnected');
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥—Ä–æ–Ω—É:', error);
      }
    } else {
      // –î–ª—è –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await initializeAIWebRTC(agent.id, type);
    }

    setCurrentCall(prev => ({
      ...prev,
      status: 'active'
    }));
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC –¥–ª—è AI –∑–≤–æ–Ω–∫–æ–≤
  const initializeAIWebRTC = async (agentId, type) => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: type === 'video',
        audio: true
      });

      localStreamRef.current = stream;
      if (localVideoRef.current) {
        localVideoRef.current.srcObject = stream;
      }

      // –î–ª—è AI –∑–≤–æ–Ω–∫–æ–≤ –º—ã –º–æ–∂–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
      // –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –æ—Ç –¥—Ä–æ–Ω–∞/—Å–µ—Ä–≤–µ—Ä–∞
      if (type === 'video' && remoteVideoRef.current) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—Ç–æ–∫ —Å –¥—Ä–æ–Ω–∞
        // –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const canvas = document.createElement('canvas');
        canvas.width = 640;
        canvas.height = 480;
        const ctx = canvas.getContext('2d');
        
        // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        ctx.fillStyle = '#1a1a1a';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = '#ffffff';
        ctx.font = '24px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('–í–∏–¥–µ–æ —Å –¥—Ä–æ–Ω–∞', canvas.width / 2, canvas.height / 2);
        
        const droneStream = canvas.captureStream(30);
        remoteVideoRef.current.srcObject = droneStream;
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC –¥–ª—è AI:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
      endCall();
    }
  };

  // –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞
  const startCall = async (type, contact) => {
    if (!socket || !currentUser) return;

    // –î–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö ID
    const calleeId = contact.id || contact.name;

    socket.emit('initiate_call', {
      callee_id: calleeId,
      call_type: type
    });

    setCurrentCall({
      type: type,
      status: 'calling',
      participant: contact
    });

    // –ï—Å–ª–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥—Ä–æ–Ω
    if (type === 'video') {
      await droneAPI('takeoff');
      const streamUrl = `http://localhost:3001/stream/audio/${calleeId}/${Date.now()}`;
      await droneAPI('audio', 'default', streamUrl);
      await droneAPI('turn', 'default');
    }
  };

  // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞
  const acceptCall = async () => {
    if (!socket || !incomingCall) return;

    socket.emit('accept_call', {
      call_id: incomingCall.call_id
    });

    setCurrentCall({
      call_id: incomingCall.call_id,
      type: incomingCall.type,
      status: 'active',
      participant: incomingCall.caller
    });

    setIncomingCall(null);
    await initializeWebRTC(incomingCall.call_id, true, incomingCall.type);

    // –ï—Å–ª–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥—Ä–æ–Ω
    if (incomingCall.type === 'video') {
      await droneAPI('takeoff');
      const streamUrl = `http://localhost:3001/stream/audio/${incomingCall.caller.id}/${Date.now()}`;
      await droneAPI('audio', 'default', streamUrl);
      await droneAPI('turn', 'default');
    }
  };

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  const declineCall = () => {
    if (!socket || !incomingCall) return;

    socket.emit('decline_call', {
      call_id: incomingCall.call_id
    });

    setIncomingCall(null);
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  const endCall = () => {
    if (socket && currentCall?.call_id) {
      socket.emit('end_call', {
        call_id: currentCall.call_id
      });
    }

    // –û—á–∏—Å—Ç–∫–∞ WebRTC
    if (peerConnectionRef.current) {
      peerConnectionRef.current.close();
      peerConnectionRef.current = null;
    }

    if (localStreamRef.current) {
      localStreamRef.current.getTracks().forEach(track => track.stop());
      localStreamRef.current = null;
    }

    setIsInCall(false);
    setCallType(null);
    setCurrentCall(null);
    setDroneStatus('disconnected');
    setSelectedChat(null); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC
  const initializeWebRTC = async (callId, isInitiator, type) => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: type === 'video',
        audio: true
      });

      localStreamRef.current = stream;
      if (localVideoRef.current) {
        localVideoRef.current.srcObject = stream;
      }

      const peerConnection = new RTCPeerConnection({
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
      });

      peerConnection.ontrack = (event) => {
        if (remoteVideoRef.current) {
          remoteVideoRef.current.srcObject = event.streams[0];
        }
      };

      peerConnection.onicecandidate = (event) => {
        if (event.candidate && socket) {
          socket.emit('webrtc_ice_candidate', {
            call_id: callId,
            candidate: event.candidate
          });
        }
      };

      peerConnectionRef.current = peerConnection;

      stream.getTracks().forEach(track => {
        peerConnection.addTrack(track, stream);
      });

      if (isInitiator) {
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        
        socket.emit('webrtc_offer', {
          call_id: callId,
          offer: offer
        });
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
      endCall(); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ WebRTC
    }
  };



  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç—É
  const sendMessageToAI = async (message, agentId) => {
    if (!message.trim() || !selectedChat) return;

    const chatId = agentId || selectedChat.id;
    const timestamp = new Date().toISOString();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
    const userMessage = {
      id: Date.now(),
      text: message,
      role: 'user',
      timestamp: timestamp
    };

    setChatMessages(prev => ({
      ...prev,
      [chatId]: [...(prev[chatId] || []), userMessage]
    }));

    setCurrentMessage("");
    setIsTyping(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI –∞–≥–µ–Ω—Ç–∞
    setTimeout(() => {
      const aiResponses = [
        "–ü—Ä–∏–≤–µ—Ç! –Ø AI –∞–≥–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "–†–∞–¥ –ø–æ–æ–±—â–∞—Ç—å—Å—è! –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.",
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å...",
        "–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
      ];
      const randomAIResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];

      const aiMessage = {
        id: Date.now() + 1,
        text: randomAIResponse,
        role: "assistant",
        timestamp: new Date().toISOString()
      };

      setChatMessages(prev => ({
        ...prev,
        [chatId]: [...(prev[chatId] || []), userMessage, aiMessage]
      }));
      setIsTyping(false);
    }, 1000 + Math.random() * 2000); // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = (e) => {
    e.preventDefault();
    if (currentMessage.trim() && selectedChat) {
      if (selectedChat.character) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç—É
        sendMessageToAI(currentMessage, selectedChat.id);
      } else {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sendMessageToUser(currentMessage, selectedChat.id);
      }
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  const sendMessageToUser = async (message, userId) => {
    if (!message.trim() || !selectedChat) return;

    const timestamp = new Date().toISOString();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
    const userMessage = {
      id: Date.now(),
      text: message,
      role: 'user',
      timestamp: timestamp
    };

    setChatMessages(prev => ({
      ...prev,
      [userId]: [...(prev[userId] || []), userMessage]
    }));

    setCurrentMessage('');

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (testUsers.find(user => user.id === userId)) {
      setIsTyping(true);
      
      setTimeout(() => {
        const responses = [
          '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ö–∞–∫ –¥–µ–ª–∞?',
          '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
          '–°–æ–≥–ª–∞—Å–µ–Ω —Å —Ç–æ–±–æ–π',
          '–•–æ—Ä–æ—à–∞—è –∏–¥–µ—è! –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —ç—Ç–æ',
          '–ü–æ–Ω—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
          '–î–∞, —è —Ç–æ–∂–µ —Ç–∞–∫ –¥—É–º–∞—é',
          '–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!',
          '–ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º'
        ];
        
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        
        const aiMessage = {
          id: Date.now() + 1,
          text: randomResponse,
          role: 'assistant',
          timestamp: new Date().toISOString()
        };

        setChatMessages(prev => ({
          ...prev,
          [userId]: [...(prev[userId] || []), aiMessage]
        }));
        
        setIsTyping(false);
      }, 1000 + Math.random() * 2000); // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞
  const createNewAgent = () => {
    if (!newAgentData.name || !newAgentData.description || !newAgentData.character) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    const newAgent = {
      id: Date.now().toString(),
      name: newAgentData.name,
      description: newAgentData.description,
      character: newAgentData.character,
      emoji: newAgentData.emoji || 'ü§ñ'
    };

    setAiAgents(prev => [...prev, newAgent]);
    setNewAgentData({ name: "", description: "", character: "", emoji: "" });
    setShowCreateAgent(false);
  };

  // –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞
  const renderCreateAgentForm = () => (
    <div className="create-agent-overlay">
      <div className="create-agent-form">
        <h2>–°–æ–∑–¥–∞—Ç—å AI –∞–≥–µ–Ω—Ç–∞</h2>
        
        <div className="form-group">
          <label>–ò–º—è –∞–≥–µ–Ω—Ç–∞ *</label>
          <input
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞"
            value={newAgentData.name}
            onChange={(e) => setNewAgentData({...newAgentData, name: e.target.value})}
          />
        </div>

        <div className="form-group">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ *</label>
          <input
            type="text"
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"
            value={newAgentData.description}
            onChange={(e) => setNewAgentData({...newAgentData, description: e.target.value})}
          />
        </div>

        <div className="form-group">
          <label>–≠–º–æ–¥–∑–∏</label>
          <input
            type="text"
            placeholder="ü§ñ"
            value={newAgentData.emoji}
            onChange={(e) => setNewAgentData({...newAgentData, emoji: e.target.value})}
            maxLength="2"
          />
        </div>

        <div className="form-group">
          <label>–•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –ª–∏—á–Ω–æ—Å—Ç—å *</label>
          <textarea
            placeholder="–û–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞..."
            value={newAgentData.character}
            onChange={(e) => setNewAgentData({...newAgentData, character: e.target.value})}
            rows="4"
          />
        </div>

        <div className="form-actions">
          <button 
            className="cancel-btn" 
            onClick={() => setShowCreateAgent(false)}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button 
            className="create-btn" 
            onClick={createNewAgent}
          >
            –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
          </button>
        </div>
      </div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–≤–æ–Ω–∫–∞
  const renderCallInterface = () => (
    <div className="call-interface">
      <div className="call-avatar">
        {currentCall.participant.emoji || currentCall.participant.avatar || currentCall.participant.username[0].toUpperCase()}
      </div>
      <h2>{currentCall.participant.username || currentCall.participant.name}</h2>
      <p>{currentCall.type === 'video' ? '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–≤–æ–Ω–æ–∫'}</p>
      
      {currentCall.type === 'video' && (
        <div className={`drone-status ${droneStatus}`}>
          {droneStatus === 'connecting' && 'üöÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥—Ä–æ–Ω–∞...'}
          {droneStatus === 'connected' && 'üöÅ –î—Ä–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å—Ç—Ä–∏–º—É'}
          {droneStatus === 'disconnected' && '–î—Ä–æ–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
        </div>
      )}

      <div className="video-container">
        {currentCall.type === 'video' && (
          <>
            <video ref={localVideoRef} autoPlay muted className="local-video" />
            <video ref={remoteVideoRef} autoPlay className="remote-video" />
          </>
        )}
      </div>

      <div className="call-controls">
        <button className="control-btn microphone" onClick={toggleMute}>
          <img src={isMuted ? "/icons/mute.png" : "/icons/unmute.png"} alt="microphone" className="icon-button" />
        </button>
        <button className="control-btn end-call" onClick={endCall}>
          <img src="/icons/phone.png" alt="end call" className="icon-button" />
        </button>
        <button className="control-btn camera">
          <img src="/icons/camera.png" alt="camera" className="icon-button" />
        </button>
      </div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä —á–∞—Ç–∞
  const renderChat = () => {
    const chatId = selectedChat.id;
    const messages = chatMessages[chatId] || [];
    
    return (
      <div className="chat-interface">
        <div className="chat-header">
          <button className="back-btn" onClick={() => setSelectedChat(null)}>‚Üê</button>
          <div className="chat-info">
            <div className="chat-avatar">{selectedChat.emoji || selectedChat.avatar || selectedChat.username[0].toUpperCase()}</div>
            <div>
              <h3>{selectedChat.username || selectedChat.name}</h3>
              <p>{selectedChat.character ? 'AI –ê–≥–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω' : '–í —Å–µ—Ç–∏'}</p>
            </div>
          </div>
          <div className="chat-actions">
            {selectedChat.character ? (
              <>
                <button 
                  className="call-btn audio" 
                  onClick={() => startAICall("audio", selectedChat)}
                >
                  <img src="/icons/phone.png" alt="audio call" className="icon-button" />
                </button>
                <button 
                  className="call-btn video" 
                  onClick={() => startAICall("video", selectedChat)}
                >
                  <img src="/icons/camera.png" alt="video call" className="icon-button" />
                </button>
              </>
            ) : (
              <>
                <button 
                  className="call-btn audio" 
                  onClick={() => startCall("audio", selectedChat)}
                >
                  <img src="/icons/phone.png" alt="audio call" className="icon-button" />
                </button>
                <button 
                  className="call-btn video" 
                  onClick={() => startCall("video", selectedChat)}
                >
                  <img src="/icons/camera.png" alt="video call" className="icon-button" />
                </button>
              </>
            )}
          </div>
        </div>

        <div className="chat-messages">
          {messages.length === 0 && selectedChat.character && (
            <div className="message received">
              <p>–ü—Ä–∏–≤–µ—Ç! –Ø {selectedChat.name}. {selectedChat.description}. –ö–∞–∫ –¥–µ–ª–∞?</p>
              <span className="time">{new Date().toLocaleTimeString()}</span>
            </div>
          )}
          
          {messages.map(message => (
            <div 
              key={message.id} 
              className={`message ${message.role === 'user' ? 'sent' : 'received'} ${message.isError ? 'error' : ''}`}
            >
              <p>{message.text}</p>
              <span className="time">{new Date(message.timestamp).toLocaleTimeString()}</span>
            </div>
          ))}
          
          {isTyping && (
            <div className="message received typing">
              <p>–ü–µ—á–∞—Ç–∞–µ—Ç...</p>
            </div>
          )}
        </div>

        <form className="chat-input" onSubmit={handleSendMessage}>
          <input 
            type="text" 
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
            value={currentMessage}
            onChange={(e) => setCurrentMessage(e.target.value)}
            disabled={isTyping}
          />
          <button type="submit" disabled={isTyping || !currentMessage.trim()}>
            <img src="/icons/send.png" alt="send" className="icon-button" />
          </button>
        </form>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
  const renderChatsList = () => {
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏
    const allUsers = [...connectedUsers, ...testUsers];
    
    return (
      <div className="chats-list">
        {/* –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        <div className="search-container">
          <div className="search-input-container">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∏–∫—É..."
              value={searchQuery}
              onChange={handleSearchChange}
              className="search-input"
            />
            <div className="search-icon">üîç</div>
          </div>
          
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
          {searchQuery && (
            <div className="search-results">
              {isSearching ? (
                <div className="search-loading">–ü–æ–∏—Å–∫...</div>
              ) : searchResults.length > 0 ? (
                searchResults.map(user => (
                  <div 
                    key={user.id} 
                    className="search-result-item" 
                    onClick={() => {
                      setSelectedChat(user);
                      setSearchQuery('');
                      setSearchResults([]);
                    }}
                  >
                    <div className="chat-avatar">
                      {user.username[0].toUpperCase()}
                    </div>
                    <div className="chat-content">
                      <h3>{user.username}</h3>
                      <p>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞</p>
                    </div>
                  </div>
                ))
              ) : (
                <div className="search-no-results">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
              )}
            </div>
          )}
        </div>

        {/* –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ + —Ç–µ—Å—Ç–æ–≤—ã–µ) */}
        <div className="connected-users-section">
          <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
          {allUsers.map(person => {
            const lastMessage = testMessages[person.id] ? testMessages[person.id][testMessages[person.id].length - 1] : null;
            return (
              <div 
                key={person.id} 
                className="chat-item" 
                onClick={() => {
                  setSelectedChat(person);
                  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                  if (testMessages[person.id] && !chatMessages[person.id]) {
                    setChatMessages(prev => ({
                      ...prev,
                      [person.id]: testMessages[person.id]
                    }));
                  }
                }}
              >
                <div className="chat-avatar">
                  {person.avatar || person.username[0].toUpperCase()}
                  {person.is_online && <div className="online-indicator"></div>}
                </div>
                <div className="chat-content">
                  <div className="chat-header-info">
                    <h3>{person.username}</h3>
                    <span className="time">{new Date(person.last_seen).toLocaleTimeString()}</span>
                  </div>
                  <p>{lastMessage ? lastMessage.text : (person.is_online ? '–û–Ω–ª–∞–π–Ω' : '–ë—ã–ª(–∞) –≤ —Å–µ—Ç–∏')}</p>
                </div>
              </div>
            );
          })}
          {allUsers.length === 0 && !searchQuery && (
            <div className="no-users">
              <p>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
              <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
          )}
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ AI –∞–≥–µ–Ω—Ç–æ–≤
  const renderAIAgentsList = () => (
    <div className="ai-agents-list">
      <div className="create-agent-button-container">
        <img src="/images/create_ai_agent_button.jpg" alt="–°–æ–∑–¥–∞—Ç—å AI –∞–≥–µ–Ω—Ç–∞" className="create-agent-image-button" onClick={() => setShowCreateAgent(true)} />
      </div>
      
      {aiAgents.map(agent => (
        <div key={agent.id} className="ai-agent-card">
          <div className="agent-avatar">{agent.emoji}</div>
          <h3>{agent.name}</h3>
          <p>{agent.description}</p>
          <button 
            className="agent-chat-btn"
            onClick={() => setSelectedChat(agent)}
          >
            –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞
          </button>
        </div>
      ))}
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (!isAuthenticated) {
    return (
      <div className="auth-container">
        <div className="auth-form">
          <h1>Twinby</h1>
          <div className="auth-tabs">
            <button 
              className={authMode === 'login' ? 'active' : ''}
              onClick={() => setAuthMode('login')}
            >
              –í—Ö–æ–¥
            </button>
            <button 
              className={authMode === 'register' ? 'active' : ''}
              onClick={() => setAuthMode('register')}
            >
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </button>
          </div>

          <form onSubmit={handleAuthSubmit}>
            <input
              type="text"
              placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
              value={authForm.username}
              onChange={(e) => setAuthForm({...authForm, username: e.target.value})}
              required
            />
            
            {authMode === 'register' && (
              <input
                type="email"
                placeholder="Email"
                value={authForm.email}
                onChange={(e) => setAuthForm({...authForm, email: e.target.value})}
                required
              />
            )}
            
            <input
              type="password"
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={authForm.password}
              onChange={(e) => setAuthForm({...authForm, password: e.target.value})}
              required
            />

            {authError && <div className="error">{authError}</div>}

            <button type="submit" disabled={authLoading}>
              {authLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : (authMode === 'login' ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')}
            </button>
          </form>
        </div>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  if (isInCall) {
    return renderCallInterface();
  }

  if (showCreateAgent) {
    return renderCreateAgentForm();
  }

  if (selectedChat) {
    return renderChat();
  }

  return (
    <div className="app">
      <div className="app-header">
        <h1>{currentView === 'chats' ? '–ß–∞—Ç—ã' : 'AI –ê–≥–µ–Ω—Ç—ã'}</h1>
        <p>{currentView === 'chats' ? '–í–∞—à–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ –±–µ—Å–µ–¥—ã' : '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'}</p>
        <button onClick={handleLogout} className="logout-btn">–í—ã–π—Ç–∏ ({currentUser?.username})</button>
      </div>

      <div className="navigation">
        <button 
          className={`nav-btn ${currentView === 'chats' ? 'active' : ''}`}
          onClick={() => setCurrentView('chats')}
        >
          –ß–∞—Ç—ã
        </button>
        <button 
          className={`nav-btn ${currentView === 'ai' ? 'active' : ''}`}
          onClick={() => setCurrentView('ai')}
        >
          AI –ê–≥–µ–Ω—Ç—ã
        </button>
      </div>

      {incomingCall && (
        <div className="incoming-call-modal">
          <div className="modal-content">
            <h3>–í—Ö–æ–¥—è—â–∏–π {incomingCall.type === 'video' ? '–≤–∏–¥–µ–æ' : '–∞—É–¥–∏–æ'}–∑–≤–æ–Ω–æ–∫</h3>
            <p>–æ—Ç {incomingCall.caller.username}</p>
            <div className="call-actions">
              <button 
                className="accept-btn"
                onClick={acceptCall}
              >
                –ü—Ä–∏–Ω—è—Ç—å
              </button>
              <button 
                className="decline-btn"
                onClick={declineCall}
              >
                –û—Ç–∫–ª–æ–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="content">
        {currentView === 'chats' ? renderChatsList() : renderAIAgentsList()}
      </div>
    </div>
  );
};

export default App;



